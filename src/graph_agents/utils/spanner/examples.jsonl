{"description": "Find persons that are employed by both companyNameA and companyNameB?", "query": "GRAPH FinanceGraph\n-- `companyNameA` and `companyNameB` are both strings\nMATCH (company_a:Company {name: \"companyNameA\"}) <-[:worksAt]- (employee:Person),\n (company_b:Company {name: \"companyNameB\"}) <-[:worksAt]- (employee:Person)\nRETURN employee.name", "schema": ""}
{"description": "Which companies have more than 42 employees?", "query": "GRAPH FinanceGraph\nMATCH (company:Company) <-[:worksAt]- (:Person)\nWITH company.name, COUNT(*) AS cnt\nFILTER cnt > 42\nRETURN company.name, cnt", "schema": ""}
{"description": "Return persons who are not affiliated with companyNameXYZ", "query": "GRAPH FinanceGraph\nMATCH (person:Person)\nWHERE NOT EXISTS {\n MATCH (:Company {name: \"companyNameXYZ\"}) <-[:worksAt]- (employee:Person)\n WHERE employee = person -- use an explicit filter instead of redeclaring `person`\n}\nRETURN n.name", "schema": ""}
{"description": "Return companies indirectly owned by companyNameXYZ within 3 hops", "query": "GRAPH FinanceGraph\n-- start from second hop because we're looking for indirect ownership.\nMATCH (:Company {name: \"companyNameXYZ\"}) -[:ownsShare]->{2,3} (c:Company)\nWITH DISTINCT c\nRETURN c.name", "schema": ""}
{"description": "Visualize the 2-hop subgraph of companyNameXYZ", "query": "GRAPH FinanceGraph\nMATCH p = (:Company {name: \"companyNameXYZ\" }) -[]-{1,2} ()\n-- visualization tool requires the final output to be JSON\nRETURN SAFE_TO_JSON(p) AS p", "schema": ""}